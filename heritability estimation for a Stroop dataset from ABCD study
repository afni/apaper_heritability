The Stroop dataset was obtained from 2020 ABCD Annual Curated Data Release 4.0 (https://nda.nih.gov/study.html?id=1299)

Two modeling approaches to estimating heritability

1) ACE model

1A) The R code below estimates heritbility using the package 'mets' through aggregation by collapsing the data across trials:

```
library(mets); dd <- read.table("RT-data.txt", header=T)
ci <- aggregate(RT~subj+zyg+fam+sex+race+age+site+cond, FUN=mean, data=dd)
co <- aggregate(RT~subj+zyg+fam+sex+race+age+site, with(ci, data.frame(subj=subj, zyg=zyg, fam=fam,sex=sex,race=race,age=age,site=site,RT=ifelse(cond=="inc",1,-1)*RT, stringsAsFactors = FALSE)), FUN=sum)
# congruent
twinlm(RT ~ site+sex+race+age+zyg, data=ci[ci$cond=="con",], DZ="DZ", zyg="zyg", id="fam", type="ace", missing=TRUE)
# incongruent
twinlm(RT ~ site+sex+race+age+zyg, data=ci[ci$cond=="inc",], DZ="DZ", zyg="zyg", id="fam", type="ace", missing=TRUE)
# incongruent vs congruent
twinlm(RT ~ site+sex+race+age+zyg, data=co, DZ="DZ", zyg="zyg", id="fam", type="ace", missing=TRUE)
```

1B) The R code below estimates heritbility using the package 'umx' through aggregation by collapsing the data across trials:

```
library(umx); dd <- read.table("RT-data.txt", header=T)
ci <- aggregate(RT~subj+zyg+fam+sex+race+age+site+cond, FUN=mean, data=dd)
co <- aggregate(RT~subj+zyg+fam+sex+race+age+site, with(ci, data.frame(subj=subj, zyg=zyg, fam=fam,sex=sex,race=race,age=age,site=site,RT=ifelse(cond=="inc",1,-1)*RT, stringsAsFactors = FALSE)), FUN=sum)

### congruent ###
# Convert 'fam' to character to avoid factor level issues
ci$fam <- as.character(ci$fam)

# Create a twin pair identifier
ci$pairID <- ave(ci$fam, ci$fam, FUN = function(x) seq_along(x))

# Reshape data to wide format
ciw <- reshape(ci[ci$cond=='1',-8],
                   idvar = "fam",
                   timevar = "pairID",
                   direction = "wide")

# Rename columns to remove the '.' character
colnames(ciw) <- gsub("\\.", "_", colnames(ciw))

# Define phenotype and covariates
phenotype <- "RT"
covariates <- c("sex", "age", "race", "site")

# Prepare MZ and DZ data
mzData <- subset(ciw, zyg_1 == "MZ" & zyg_2 == "MZ")
dzData <- subset(ciw, zyg_1 == "DZ" & zyg_2 == "DZ")

# Define the umxACE model
aceModel <- umxACE(
  name = "Twin Study",
  selDVs = phenotype,
  selCovs = covariates,
  mzData = mzData,
  dzData = dzData,
  sep = "_"
)

# Summarize the results
summary(aceModel)

### incongruent ###
# Convert 'fam' to character to avoid factor level issues
ci$fam <- as.character(ci$fam)

# Create a twin pair identifier
ci$pairID <- ave(ci$fam, ci$fam, FUN = function(x) seq_along(x))

# Reshape data to wide format
ciw <- reshape(ci[ci$cond=='2',-8],
                   idvar = "fam",
                   timevar = "pairID",
                   direction = "wide")

# Rename columns to remove the '.' character
colnames(ciw) <- gsub("\\.", "_", colnames(ciw))

# Define phenotype and covariates
phenotype <- "RT"
covariates <- c("sex", "age", "race", "site")

# Prepare MZ and DZ data
mzData <- subset(ciw, zyg_1 == "MZ" & zyg_2 == "MZ")
dzData <- subset(ciw, zyg_1 == "DZ" & zyg_2 == "DZ")

# Define the umxACE model
aceModel <- umxACE(
  name = "Twin Study",
  selDVs = phenotype,
  selCovs = covariates,
  mzData = mzData,
  dzData = dzData,
  sep = "_"
)

# Summarize the results
summary(aceModel)


### contrast between incongruent and congruent ###
# Convert 'fam' to character to avoid factor level issues
co$fam <- as.character(co$fam)

# Create a twin pair identifier
co$pairID <- ave(co$fam, co$fam, FUN = function(x) seq_along(x))

# Reshape data to wide format
cow <- reshape(co,
                   idvar = "fam",
                   timevar = "pairID",
                   direction = "wide")

# Rename columns to remove the '.' character
colnames(cow) <- gsub("\\.", "_", colnames(cow))

# Define phenotype and covariates
phenotype <- "RT"
covariates <- c("sex", "age", "race", "site")

# Prepare MZ and DZ data
mzData <- subset(cow, zyg_1 == "MZ" & zyg_2 == "MZ")
dzData <- subset(cow, zyg_1 == "DZ" & zyg_2 == "DZ")

# Define the umxACE model
aceModel <- umxACE(
  name = "Twin Study",
  selDVs = phenotype,
  selCovs = covariates,
  mzData = mzData,
  dzData = dzData,
  sep = "_"
)

# Summarize the results
summary(aceModel)



2) Hierarchical Bayesian modeling through the R package brms

Below is the R code for estimating heritbility without data aggregation:

```
library("brms"); dd <- read.table("RT-data.txt", header=T)
options(mc.cores = parallel::detectCores())
m <- brm(RT ~ site+sex+race+cond*age+zyg+
(0+MZ:cond|fam)+(0+DZ:cond|fam)+
(0+MZ:cond|fam:subj)+(0+DZ:cond|fam:subj),
family=shifted_lognormal,
data=dd, chains = 4, iter=1000,
backend = "cmdstanr", threads = threading(12))
```

The input data RT-data.txt has a structure as below (`age` was centered around 120 months):

```
subj site  age sex race fam  zyg cond trl MZ DZ  RT
s1  site14 -5   M    w   f1  MZ   inc  5   1  0  803
s1  site14 -5   M    w   f1  MZ   con  7   1  0  835
s1  site14 -5   M    w   f1  MZ   con  9   1  0  986
s1  site14 -5   M    w   f1  MZ   con 11   1  0  794
s1  site14 -5   M    w   f1  MZ   con 13   1  0 1110
s1  site14 -5   M    w   f1  MZ   inc 15   1  0  919
...
```

3) Hierarchical modeling through the R package lme4

library(lme4)
dd <- read.table('RT.E.txt', header=T)
# congruent 
m1 <- lmer(log(RT) ~ site+sex+race+age+zyg+(0+MZ|fam)+(0+DZ|fam)+
           (0+MZ|fam:subj)+(0+DZ|fam:subj), data=dd[dd$c==-0.5,],
           control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

# incongruent
m2 <- lmer(log(RT) ~ site+sex+race+age+zyg+(0+MZ|fam)+(0+DZ|fam)+
           (0+MZ|fam:subj)+(0+DZ|fam:subj), data=dd[dd$c==0.5,],
           control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

# contrast
mc <- lmer(log(RT) ~ site+sex+race+age+zyg*cond+(0+MZ+MZ:c|fam)+(0+DZ+DZ:c|fam)+
           (0+MZ+MZ:c|fam:subj)+(0+DZ+DZ:c|fam:subj), data=dd,
           control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
